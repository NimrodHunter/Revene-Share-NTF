/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RevenueClaim, RevenueClaimInterface } from "../RevenueClaim";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "claimer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "NFTId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Claimed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "claim",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "NFT_",
        type: "address",
      },
      {
        internalType: "address",
        name: "rewardToken_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "root_",
        type: "bytes32",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506001600081905580546001600160a01b03191633179055610d38806100376000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063ae0b51df14610046578063d2d5f5b11461006e578063f7c618c114610083575b600080fd5b610059610054366004610ae4565b6100ae565b60405190151581526020015b60405180910390f35b61008161007c366004610bcf565b610357565b005b600454610096906001600160a01b031681565b6040516001600160a01b039091168152602001610065565b6000600260005414156101085760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b60026000819055546040516331a9108f60e11b81526004810186905233916001600160a01b031690636352211e9060240160206040518083038186803b15801561015157600080fd5b505afa158015610165573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101899190610c15565b6001600160a01b0316146101df5760405162461bcd60e51b815260206004820181905260248201527f796f757220617265206e6f7420746865206f776e6572206f662045524337323160448201526064016100ff565b33600090815260056020908152604080832087845290915290205460ff161561024a5760405162461bcd60e51b815260206004820152601760248201527f72657761726420616c72726561647920636c61696d656400000000000000000060448201526064016100ff565b61025633858585610601565b6102a25760405162461bcd60e51b815260206004820152601160248201527f6d65726b6c652070726f6f66206661696c00000000000000000000000000000060448201526064016100ff565b6102ac3384610662565b6102f85760405162461bcd60e51b815260206004820152601460248201527f726577617264207472616e73666572206661696c00000000000000000000000060448201526064016100ff565b336000818152600560209081526040808320888452909152808220805460ff19166001179055518592879290917f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a9190a4506001806000559392505050565b6001546001600160a01b031633146103bd5760405162461bcd60e51b8152602060048201526024808201527f6d73672e73656e646572206974206973206e6f742074686520696e697469616c60448201526334bd32b960e11b60648201526084016100ff565b8060001a60f81b7fff00000000000000000000000000000000000000000000000000000000000000166104325760405162461bcd60e51b815260206004820152600a60248201527f656d70747920726f6f740000000000000000000000000000000000000000000060448201526064016100ff565b6004546001600160a01b031661048a5760405162461bcd60e51b815260206004820152601c60248201527f72657761726420746f6b656e2073686f756c64206e6f7420626520300000000060448201526064016100ff565b600082116104da5760405162461bcd60e51b815260206004820152601f60248201527f616d6f756e742073686f756c642062652067726561746572207468616e20300060448201526064016100ff565b600480546040516370a0823160e01b8152309281019290925283916001600160a01b03909116906370a082319060240160206040518083038186803b15801561052257600080fd5b505afa158015610536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055a9190610c48565b146105a75760405162461bcd60e51b815260206004820152600c60248201527f6f7574206f662066756e6473000000000000000000000000000000000000000060448201526064016100ff565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000009081166001600160a01b0396871617909155600480548216949095169390931790935550600391909155600180549091169055565b6040516bffffffffffffffffffffffff19606086901b16602082015260348101849052605481018390526000908190607401604051602081830303815290604052805190602001209050610658836003548361072a565b9695505050505050565b60006001600160a01b0383166106ba5760405162461bcd60e51b815260206004820152601560248201527f6d7573742062652076616c69642061646472657373000000000000000000000060448201526064016100ff565b6000821161070a5760405162461bcd60e51b815260206004820152601760248201527f796f75206d7573742073656e6420736f6d657468696e6700000000000000000060448201526064016100ff565b600454610721906001600160a01b03168484610742565b50600192915050565b60008261073785846107ae565b1490505b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790526107a990849061085a565b505050565b600081815b84518110156108525760008582815181106107d0576107d0610c32565b6020026020010151905080831161081257604080516020810185905290810182905260600160405160208183030381529060405280519060200120925061083f565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b508061084a81610c61565b9150506107b3565b509392505050565b60006108af826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661093f9092919063ffffffff16565b8051909150156107a957808060200190518101906108cd9190610c8a565b6107a95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016100ff565b606061094e8484600085610956565b949350505050565b6060824710156109ce5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016100ff565b843b610a1c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100ff565b600080866001600160a01b03168587604051610a389190610cdc565b60006040518083038185875af1925050503d8060008114610a75576040519150601f19603f3d011682016040523d82523d6000602084013e610a7a565b606091505b5091509150610a8a828286610a95565b979650505050505050565b60608315610aa457508161073b565b825115610ab45782518084602001fd5b8160405162461bcd60e51b81526004016100ff9190610cf8565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215610af957600080fd5b833592506020808501359250604085013567ffffffffffffffff80821115610b2057600080fd5b818701915087601f830112610b3457600080fd5b813581811115610b4657610b46610ace565b8060051b604051601f19603f83011681018181108582111715610b6b57610b6b610ace565b60405291825284820192508381018501918a831115610b8957600080fd5b938501935b82851015610ba757843584529385019392850192610b8e565b8096505050505050509250925092565b6001600160a01b0381168114610bcc57600080fd5b50565b60008060008060808587031215610be557600080fd5b8435610bf081610bb7565b93506020850135610c0081610bb7565b93969395505050506040820135916060013590565b600060208284031215610c2757600080fd5b815161073b81610bb7565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610c5a57600080fd5b5051919050565b6000600019821415610c8357634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215610c9c57600080fd5b8151801515811461073b57600080fd5b60005b83811015610cc7578181015183820152602001610caf565b83811115610cd6576000848401525b50505050565b60008251610cee818460208701610cac565b9190910192915050565b6020815260008251806020840152610d17816040850160208701610cac565b601f01601f1916919091016040019291505056fea164736f6c6343000809000a";

type RevenueClaimConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RevenueClaimConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RevenueClaim__factory extends ContractFactory {
  constructor(...args: RevenueClaimConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "RevenueClaim";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RevenueClaim> {
    return super.deploy(overrides || {}) as Promise<RevenueClaim>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RevenueClaim {
    return super.attach(address) as RevenueClaim;
  }
  connect(signer: Signer): RevenueClaim__factory {
    return super.connect(signer) as RevenueClaim__factory;
  }
  static readonly contractName: "RevenueClaim";
  public readonly contractName: "RevenueClaim";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RevenueClaimInterface {
    return new utils.Interface(_abi) as RevenueClaimInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RevenueClaim {
    return new Contract(address, _abi, signerOrProvider) as RevenueClaim;
  }
}
