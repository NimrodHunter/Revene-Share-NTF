/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RevenueClaim, RevenueClaimInterface } from "../RevenueClaim";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "claimer",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "NFTId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Claimed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "NFT_",
        type: "address",
      },
      {
        internalType: "address",
        name: "rewardToken_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "root_",
        type: "bytes32",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506001600055610d90806100256000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063ae0b51df14610046578063d2d5f5b11461005b578063f7c618c11461006e575b600080fd5b610059610054366004610b3c565b61009d565b005b610059610069366004610c27565b610397565b600354610081906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600260005414156100f55760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b600260005560015460ff1661014c5760405162461bcd60e51b815260206004820152601e60248201527f636f6e74726163742073686f756c6420626520696e697469616c697a6564000060448201526064016100ec565b6001546040516331a9108f60e11b815260048101859052339161010090046001600160a01b031690636352211e9060240160206040518083038186803b15801561019557600080fd5b505afa1580156101a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cd9190610c6d565b6001600160a01b0316146102235760405162461bcd60e51b815260206004820181905260248201527f796f757220617265206e6f7420746865206f776e6572206f662045524337323160448201526064016100ec565b33600090815260046020908152604080832086845290915290205460ff161561028e5760405162461bcd60e51b815260206004820152601760248201527f72657761726420616c72726561647920636c61696d656400000000000000000060448201526064016100ec565b61029a33848484610659565b6102e65760405162461bcd60e51b815260206004820152601160248201527f6d65726b6c652070726f6f66206661696c00000000000000000000000000000060448201526064016100ec565b6102f033836106ba565b61033c5760405162461bcd60e51b815260206004820152601460248201527f726577617264207472616e73666572206661696c00000000000000000000000060448201526064016100ec565b336000818152600460209081526040808320878452909152808220805460ff19166001179055518492869290917f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a9190a45050600160005550565b60015460ff16156103ea5760405162461bcd60e51b815260206004820152601360248201527f616c726561647920696e697469616c697a65640000000000000000000000000060448201526064016100ec565b8060001a60f81b7fff000000000000000000000000000000000000000000000000000000000000001661045f5760405162461bcd60e51b815260206004820152600a60248201527f656d70747920726f6f740000000000000000000000000000000000000000000060448201526064016100ec565b6003546001600160a01b03166104b75760405162461bcd60e51b815260206004820152601c60248201527f72657761726420746f6b656e2073686f756c64206e6f7420626520300000000060448201526064016100ec565b600082116105075760405162461bcd60e51b815260206004820152601f60248201527f616d6f756e742073686f756c642062652067726561746572207468616e20300060448201526064016100ec565b6003546040516370a0823160e01b815230600482015283916001600160a01b0316906370a082319060240160206040518083038186803b15801561054a57600080fd5b505afa15801561055e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105829190610ca0565b146105cf5760405162461bcd60e51b815260206004820152600c60248201527f6f7574206f662066756e6473000000000000000000000000000000000000000060448201526064016100ec565b60018054600380546001600160a01b039687167fffffffffffffffffffffffff000000000000000000000000000000000000000090911617905560029290925560ff1993909416610100029283167fffffffffffffffffffffff00000000000000000000000000000000000000000082161760ff9384169390911692909217159190911790915550565b6040516bffffffffffffffffffffffff19606086901b166020820152603481018490526054810183905260009081906074016040516020818303038152906040528051906020012090506106b08360025483610782565b9695505050505050565b60006001600160a01b0383166107125760405162461bcd60e51b815260206004820152601560248201527f6d7573742062652076616c69642061646472657373000000000000000000000060448201526064016100ec565b600082116107625760405162461bcd60e51b815260206004820152601760248201527f796f75206d7573742073656e6420736f6d657468696e6700000000000000000060448201526064016100ec565b600354610779906001600160a01b0316848461079a565b50600192915050565b60008261078f8584610806565b1490505b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790526108019084906108b2565b505050565b600081815b84518110156108aa57600085828151811061082857610828610c8a565b6020026020010151905080831161086a576040805160208101859052908101829052606001604051602081830303815290604052805190602001209250610897565b60408051602081018390529081018490526060016040516020818303038152906040528051906020012092505b50806108a281610cb9565b91505061080b565b509392505050565b6000610907826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166109979092919063ffffffff16565b80519091501561080157808060200190518101906109259190610ce2565b6108015760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016100ec565b60606109a684846000856109ae565b949350505050565b606082471015610a265760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016100ec565b843b610a745760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100ec565b600080866001600160a01b03168587604051610a909190610d34565b60006040518083038185875af1925050503d8060008114610acd576040519150601f19603f3d011682016040523d82523d6000602084013e610ad2565b606091505b5091509150610ae2828286610aed565b979650505050505050565b60608315610afc575081610793565b825115610b0c5782518084602001fd5b8160405162461bcd60e51b81526004016100ec9190610d50565b634e487b7160e01b600052604160045260246000fd5b600080600060608486031215610b5157600080fd5b833592506020808501359250604085013567ffffffffffffffff80821115610b7857600080fd5b818701915087601f830112610b8c57600080fd5b813581811115610b9e57610b9e610b26565b8060051b604051601f19603f83011681018181108582111715610bc357610bc3610b26565b60405291825284820192508381018501918a831115610be157600080fd5b938501935b82851015610bff57843584529385019392850192610be6565b8096505050505050509250925092565b6001600160a01b0381168114610c2457600080fd5b50565b60008060008060808587031215610c3d57600080fd5b8435610c4881610c0f565b93506020850135610c5881610c0f565b93969395505050506040820135916060013590565b600060208284031215610c7f57600080fd5b815161079381610c0f565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610cb257600080fd5b5051919050565b6000600019821415610cdb57634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208284031215610cf457600080fd5b8151801515811461079357600080fd5b60005b83811015610d1f578181015183820152602001610d07565b83811115610d2e576000848401525b50505050565b60008251610d46818460208701610d04565b9190910192915050565b6020815260008251806020840152610d6f816040850160208701610d04565b601f01601f1916919091016040019291505056fea164736f6c6343000809000a";

type RevenueClaimConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RevenueClaimConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RevenueClaim__factory extends ContractFactory {
  constructor(...args: RevenueClaimConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "RevenueClaim";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RevenueClaim> {
    return super.deploy(overrides || {}) as Promise<RevenueClaim>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RevenueClaim {
    return super.attach(address) as RevenueClaim;
  }
  connect(signer: Signer): RevenueClaim__factory {
    return super.connect(signer) as RevenueClaim__factory;
  }
  static readonly contractName: "RevenueClaim";
  public readonly contractName: "RevenueClaim";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RevenueClaimInterface {
    return new utils.Interface(_abi) as RevenueClaimInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RevenueClaim {
    return new Contract(address, _abi, signerOrProvider) as RevenueClaim;
  }
}
