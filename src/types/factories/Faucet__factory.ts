/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Faucet, FaucetInterface } from "../Faucet";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Claimed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061061f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063aad3ec9614610030575b600080fd5b61004361003e366004610513565b610045565b005b3360009081526020819052604090205469021e19e0c9bab24000009061006c90839061054b565b106100be5760405162461bcd60e51b815260206004820152601a60248201527f657863656564206d617820616d6f756e7420746f20636c61696d00000000000060448201526064015b60405180910390fd5b6100c9823383610175565b6101155760405162461bcd60e51b815260206004820152600c60248201527f6f7574206f662066756e6473000000000000000000000000000000000000000060448201526064016100b5565b336000908152602081905260408120805483929061013490849061054b565b909155505060405181906001600160a01b0384169033907ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd399268390600090a45050565b60006001600160a01b0383166101cd5760405162461bcd60e51b815260206004820152601560248201527f6d7573742062652076616c69642061646472657373000000000000000000000060448201526064016100b5565b6000821161021d5760405162461bcd60e51b815260206004820152601760248201527f796f75206d7573742073656e6420736f6d657468696e6700000000000000000060448201526064016100b5565b610228848484610233565b5060015b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b17905261029a90849061029f565b505050565b60006102f4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166103849092919063ffffffff16565b80519091501561029a57808060200190518101906103129190610571565b61029a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016100b5565b6060610393848460008561039b565b949350505050565b6060824710156104135760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016100b5565b843b6104615760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100b5565b600080866001600160a01b0316858760405161047d91906105c3565b60006040518083038185875af1925050503d80600081146104ba576040519150601f19603f3d011682016040523d82523d6000602084013e6104bf565b606091505b50915091506104cf8282866104da565b979650505050505050565b606083156104e957508161022c565b8251156104f95782518084602001fd5b8160405162461bcd60e51b81526004016100b591906105df565b6000806040838503121561052657600080fd5b82356001600160a01b038116811461053d57600080fd5b946020939093013593505050565b6000821982111561056c57634e487b7160e01b600052601160045260246000fd5b500190565b60006020828403121561058357600080fd5b8151801515811461022c57600080fd5b60005b838110156105ae578181015183820152602001610596565b838111156105bd576000848401525b50505050565b600082516105d5818460208701610593565b9190910192915050565b60208152600082518060208401526105fe816040850160208701610593565b601f01601f1916919091016040019291505056fea164736f6c6343000809000a";

type FaucetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FaucetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Faucet__factory extends ContractFactory {
  constructor(...args: FaucetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Faucet";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Faucet> {
    return super.deploy(overrides || {}) as Promise<Faucet>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Faucet {
    return super.attach(address) as Faucet;
  }
  connect(signer: Signer): Faucet__factory {
    return super.connect(signer) as Faucet__factory;
  }
  static readonly contractName: "Faucet";
  public readonly contractName: "Faucet";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FaucetInterface {
    return new utils.Interface(_abi) as FaucetInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Faucet {
    return new Contract(address, _abi, signerOrProvider) as Faucet;
  }
}
